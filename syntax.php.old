<?php
// vim: set sw=2 ts=2 enc=utf-8 syntax=php :
/**
 *
 * @license    GPL 2 (http://www.gnu.org/licenses/gpl.html)
 * @author     Christoph Lang <calbity@gmx.de>
 *             (with some modifications made by Oliver Geisen <oliver.geisen@kreisbote.de>
 */
 
// based on http://www.dokuwiki.org/plugin:tutorial
 
/**
 *
 * Usage:
 * [[mysql:server:username:password:database|query|refresh]]
 * [[mssql:server:username:password:database|query|refresh]]
 * [[oracle:server:username:password:database|query|refresh]]
 * [[sqlite:unused:unused:unused:path to sqlite3 database|query|refresh]]
 * [[sqlcsv:unused:unused:unused:path to csv file|delimiter|refresh]]
 * [[sqlaccess:unused:unused:password:path to mdb file|query|refresh]]
 * [[postgresql:server:username:password:database|query|refresh]]
 */
 
/**
 * Disabled, to use that class in standalone mode...
 * // must be run within DokuWiki
 */
 
if (!defined('DOKU_INC')) die();
if (!defined('DOKU_PLUGIN')) define('DOKU_PLUGIN', DOKU_INC . 'lib/plugins/');
require_once(DOKU_PLUGIN . 'syntax.php');
 
 
/**
 * All DokuWiki plugins to extend the parser/rendering mechanism
 * need to inherit from this class
 */
class syntax_plugin_sqlcomp extends DokuWiki_Syntax_Plugin {

  private $sPath = "sqlcomp/"; # relative to $conf['cachedir'] (DOKU_INC/data/cache)
  private $sConfig = "lib/plugins/sqlcomp/config.php";
 
  /**
   * Layout
   */
  private $aMessages = array(
    "error" => "<div id=\"error\" style=\"text-align:center; font-weight: bold; border: 2px solid #0f0;background-color: #f00; padding: 5px; margin: 5px\">%text%</div>\n",
    "message" => "<div id=\"difference\" style=\"text-align:center; font-weight: bold; border: 2px solid #fd0;background-color: #ffd; padding: 5px; margin: 5px\">%text%</div>\n",
    "pre" => "<table class=\"inline\">\n",
    "post" => "</table>\n",
    "th" => "<th class=\"row%number%\" style=\"text-align:center;%type%\">%text%</th>",
    "td" => "<td class=\"col%number%\" style=\"%type%\">%text%</td>",
    "tr" => "<tr class=\"row%number%\" style=\"%type%\">%text%</tr>\n",
    "same" => "",
    "new" => "border:2px solid green;",
    "old" => "color:#a0a0a0; text-decoration:line-through;",
    "deleted" => "background:red; text-decoration:line-through;",
    "changed" => "background:#F2EA0D;",
  );

  /**
   * Default Language - German
   */
  private $aString = array(
    //Number of affected Rows
    "affected" => "Anzahl geänderter Zeilen",
    //This Database Type is not yet Supported...
    "nohandler" => "Dieser Datenbanktyp wird (noch) nicht unterstützt...",
    //There are some differences in the table!
    "difference" => "Es wurden Unterschiede in den Tabellen festgestellt!",
    //Everything is allright.
    "same" => "Alles in Ordnung.",
    //The resultset is empty.
    "empty" => "Das Resultset ist leer.",
    //An unkown error occured!
    "problem" => "Es ist ein unbekanntes Problem aufgetreten!",
    //Cache is displayed, but new data could not be retrieved.
    "cache" => "Cache wird angezeigt, aber neue Daten konnten nicht abgerufen werden.",
    //Cache was refreshed, or table was collected for the first time.
    "first" => "Der Cache wurde soeben erneuert, oder die Tabelle wurde das erste Mal abgerufen.",
    //New data could not be retrieved.
    "connection" => "Die neuesten Daten konnten nicht abgerufen werden.",
    //The data is not valid. Please review your connection settings!
    "wrong" => "Die eingegebenen Daten sind ungültig! Bitte Überprüfen!",
    //Access denied creating cachedir
    "mkdir_failed" => "Beim Versuch ein Verzeichnis zu erstellen ist ein Fehler aufgetreten!",
  );

  private $defaultRefresh = 1;

  function getInfo()
  {
    return array(
      'author'  => 'Christoph Lang',
      'email'   => 'calbity@gmx.de',
      'date'    => '2008-07-10',
      'name'    => 'SQLCOMP Plugin',
      'desc'    => 'This plugin let you display reultsets from various databases and show changes.',
      'url'     => 'http://www.google.de'
    );
  }

  public function query($query)
  {
    $temp = null;
    $data = $this->handle($query,"","",$temp);
    return $this->_query($data,"csv");       
  }

  public function __construct()
  {
  }

  private function _error($text){
    return str_replace("%text%",$text,$this->aMessages["error"]);      
  }

    private function _message($text){
      return str_replace("%text%",$text,$this->aMessages["message"]);
 
    }
 
 
 
    private function _sqlaccess($Server,$User,$Pass,$Database,$Query){
 
        if(!$connection = odbc_connect("DRIVER={Microsoft Access Driver (*.mdb)}; DBQ=$Database", "ADODB.Connection", $Pass, "SQL_CUR_USE_ODBC") or false)
          throw new Exception($this->aString["problem"]);
 
        $rs = odbc_exec($connection,$Query);
 
        $dbArray = array();
        while ($row = odbc_fetch_array($rs))
          $dbArray[] = $row;
 
        odbc_close($connection);
        return $dbArray;
 
    }
    private function _postgresql($Server,$User,$Pass,$Database,$Query){
 
        if(!$connection = pg_connect("host=".$Server." dbname=".$Database." user=".$User." password=".$Pass) or false)
          throw new Exception($this->aString["problem"]);
 
        $rs = pg_exec($Query);
        $dbArray = pg_fetch_array($result, NULL, PGSQL_ASSOC);
 
        pg_close($connection);
        return $dbArray;
 
    }
 
    private function _mysql($Server,$User,$Pass,$Database,$Query){
 
        if(!$connection = mysql_connect($Server, $User, $Pass) or false)
          throw new Exception(mysql_error());
 
        if(!mysql_select_db($Database, $connection))
          throw new Exception(mysql_error());

        // let result be German UTF8 (weekdays, numbers, etc.)
	# TODO: get configured
        if(!mysql_query("SET character_set_results = 'utf8', character_set_connection = 'utf8', character_set_client = 'utf8', lc_time_names = 'de_DE'"))
          throw new Exception(mysql_error());

	// transport UTF8 coded strings/fieldnames to server
#        $Query = utf8_decode($Query); # NOT NEEDED IF SET BEFORE QUERY

	// KREISBOTE: added support for multiple queries
	// NOTE: only the last query gives the resultset!!!
	$q = split("\n",$Query);
	$s = '';
	$multi = array();
	foreach($q as $line){
	  if(preg_match('/[^\\\\];\s*$/',$line)){
	    $s .= substr(rtrim($line),0,-1);
	    $multi[] = $s;
	    $s = '';
	  } else {
	    $s .= $line."\n";
	  }
	}
	$multi[] = $s;

	foreach($multi as $q){
	  if(trim($q) == '') continue;  # ignore empty lines
	  $q = preg_replace('/\\\\;/',';',$q);  # un-escape ';' chars in query
	  #DEBUG: print '<pre style="background:yellow">'.$q.'</pre>';
	  $rs = mysql_query($q);
	}

        $dbArray = array();

	 # If resultset is simply 'true' than an INSERT or UPDATE operation has done.
	 # In this case, return only the number of rows affected by this operation. 
        if($rs === true)
          $dbArray[] = array( $this->aString["affected"] => mysql_affected_rows ($connection));
        else
          while ($row = mysql_fetch_assoc($rs))
            $dbArray[] = $row;
 
	#print '<pre style="background:yellow">'; print_r($dbArray); print '</pre>';

        mysql_close($connection);
        return $dbArray;
 
    }
    private function _mssql($Server,$User,$Pass,$Database,$Query){
 
        if(!$dbhandle = mssql_connect($Server, $User, $Pass))
          throw new Exception($this->aString["problem"]);
 
        mssql_select_db($Database, $dbhandle);
 
        $rs = mssql_query($Query);
 
        $dbArray = array();
 
        if($rs === true)
          $dbArray[] = array( $this->aString["affected"] => mssql_rows_affected ($connection));
        else
          while ($row = mssql_fetch_assoc($rs))
            $dbArray[] = $row;
 
        mssql_close($dbhandle);
        return $dbArray;
 
    }
 
    private function _oracle($Server,$User,$Pass,$Database,$Query){
          throw new Exception($this->aString["nohandler"]);      
    }
 
    private function _sqlcsv($Server,$User,$Pass,$Database,$Query){  
 
        if(!$handle = fopen($Database,"r"))
          throw new Exception($this->aString["nohandler"]);    
 
        $dbArray = array();
        $keys = fgetcsv ( $handle , 1000, $Query);
 
        while ($row = fgetcsv ( $handle , 1000, $Query)){
          $temprow = array();
          foreach($row as $key => $value)
            $temprow[$keys[$key]] = $value;
 
          $dbArray[] = $temprow;
 
        }
 
        fclose($handle);
        return $dbArray;
 
    }
 
    private function _sqlite($Server,$User,$Pass,$Database,$Query){
 
        $dbHandle = new PDO('sqlite:'.$Database);    
 
        $result = $dbHandle->query($Query);
        if(!$result)
          throw new PDOException;
        $dbArray = array();
 
        if($result->rowCount() > 0)
          $dbArray[] = array( $this->aString["affected"] => $result->rowCount() );
        else
          while($row = $result->fetch(PDO::FETCH_ASSOC))
            $dbArray[] = $row;
 
        return $dbArray;
 
    }
    private function _debug($data){
 
        $sResponse = "";
        foreach($data as $key => $value)
            $sResponse .= "".$key . "=> " .$value ."<br/>\n";            
        return $sResponse;
 
    }
 
    private function _verifyInput($data){
      if(!is_array($data))
        return false;
      if(count($data) != 8) # KREISBOTE: changed to 8
        return false;
      return true;    
    }
 
	private function _load($filename){
 
        $Cache = null;
        $Update = true;
        if(file_exists($filename)){
          $Cache = file_get_contents($filename);  
          $Cache = unserialize($Cache);
 
          $Update = $Cache["Update"];
          if(time() > $Update)
            $Update = true;
          else
            $Update = false;
          $Cache = $Cache["Table"];    
        }        
 
        return array($Update,$Cache);
    }
 
    private function _save($filename,$rs,$timestamp){
        $timestamp = (time() + ($timestamp*60));
        $Cache["Update"] = $timestamp;
        $Cache["Table"] = $rs;
 
        $Cache = serialize($Cache);
 
        $handle = fopen($filename,"w");
        fwrite($handle,$Cache);
        fclose($handle);
 
 
    }
    private function array2csv($data){
 
      $sResponse = "";
 
      $keys = array_keys($data[0]);
      $sResponse .= implode(";",$keys)."\n";
      foreach($data as $row)
        $sResponse .= implode(";",$row)."\n";
 
 
      return $sResponse;
 
    }
 
 
	/**
	 *
	 */
	private function _query($data,$type=null)
	{
		global $conf;

		//return $this->_debug($data);

		if(!$this->_verifyInput($data))
			return $this->_error($this->aString["wrong"]);

		$savedir = $conf['cachedir'].'/'.$this->sPath;
		if(!is_dir($savedir) && !mkdir($savedir))
			return $this->_error($this->aString["mkdir_failed"]);
 
		$filename = $savedir.md5($data[0].$data[1].$data[2].$data[3].$data[4].$data[5]);
		/*
		Array
		(
				[0] => mysql
				[1] => kbwm-prod.kreisbote.de
				[2] => jps
				[3] => sq88ll
				[4] => journal
				[5] => 
		SELECT
		ORDER BY auftermin.adname DESC,auftrag.kb_modified DESC
		LIMIT 60;

				[6] => 3600
				[7] => nodiff
		*/
 
		$Cache = $this->_load($filename);
		$Update = true;
		if(is_array($Cache)){
			$Update = $Cache[0];
			$Cache = $Cache[1];
		}
 
		try{  
			switch($data[0]){
				case "mysql":
					$rs = $this->_mysql($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				case "mssql":
					$rs = $this->_mssql($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				case "oracle":
					$rs = $this->_oracle($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				case "sqlite":
					$rs = $this->_sqlite($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				case "sqlaccess":
					$rs = $this->_sqlaccess($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				case "postgresql":
					$rs = $this->_postgresql($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				case "sqlcsv":
					$rs = $this->_sqlcsv($data[1], $data[2], $data[3],$data[4],$data[5]);
					break;
				default:
					return $this->_error($this->aString["nohandler"]);
			}
		}
		catch(Exception $ex){
			if($conf['allowdebug']){
				$err = $this->aString["problem"];
				$err .= '<br>"'.$ex->getMessage().'"';
				$err .= '<br>Aufgetreten in Zeile '.$ex->getLine().' von Datei '.$ex->getFile();
				$sResponse = $this->_error($err);
			} else {
				$sResponse = $this->_error($this->aString["problem"]);
			}
			if(isset($Cache)){
				$sResponse = $this->_print($Cache);    
				$sResponse .= $this->_error($this->aString["cache"]);
			}
			return $sResponse;
		}
		if ($rs === false){
			return $this->_error($this->aString["empty"] );
		}
 
		if(isset($type) && $type == "csv")
			return $this->array2csv($rs);

		#KREISBOTE
		$difference = $this->_difference($Cache,$rs,$data[7]);
	  $sResponse = $difference[0];    

		if($Update && isset($rs)){
			$this->_save($filename,$rs,$data[6]);      
		}  

		$sResponse .= $difference[1];      
 
		return $sResponse;
	}


	/**
	 *
	 */
	function _print($array)
	{
		#print '<pre style="background:yellow">';print_r($array); print '</pre>';
		$i = 0;
		$th = "";
		$td = "";
		$tr = "";

		# KREISBOTE: here we need to handle empty results not as an error
		if($array[0] === false){
			return $this->_error($this->aString["problem"]);
		}
		if(!isset($array[0])){
			return ""; # no result
		}

		$temp = array_keys($array[0]);
		foreach($temp as $column){
			if($column == "type")
				continue;  
			$th .= str_replace(array("%number%","%text%","%type%"),array(0,$column,""),$this->aMessages["th"]);      
		}
		$tr = str_replace(array("%number%","%text%","%type%"),array(0,$th,""),$this->aMessages["tr"]);

		foreach($array as $row) {

			$j = 0;
			$td = "";
			if(!isset($row["type"]))
				$row["type"] = $this->aMessages["same"];

			foreach($row as $key => $Value){          
				if($key == "type")
					continue;  
				$td .= str_replace(array("%number%","%text%","%type%"),array($j,$Value,$row["type"]),$this->aMessages["td"]);
				$j++;            
			}
			$tr .= str_replace(array("%number%","%text%","%type%"),array($i,$td,$row["type"]),$this->aMessages["tr"]);
			$i++;          
		}

		$sResponse = $this->aMessages["pre"];
		$sResponse .= $tr;        
		$sResponse .= $this->aMessages["post"];

		return $sResponse;
	}
 
	function _difference($Cache,$New,$opts)
	{
		if(in_array('nodiff',$opts))
			$Cache = $New;
 
		if($New == $Cache){
	      # KREISBOTE: doppelt? lieber keine "Alles in Ordnung" meldung...
              return array($this->_print($New),"");
#              return array($this->_print($New),$this->_message($this->aString["same"]));
            }
 
            if(!isset($New) && isset($Cache))
              return array($this->_print($Cache),$this->_message($this->aString["difference"]));
 
            if(isset($New) && !isset($Cache))
              return array($this->_print($New),$this->_message($this->aString["first"]));
 
            if(count($New) <= 0)
              return array($this->_print($Cache),$this->_message($this->aString["connection"]));
 
            $Max = count($Cache);
            if(count($New) > count($Cache))
              $Max = count($New);
 
            $PrintArray = array();        
 
            for($i=0; $i < $Max; $i++){
              if(isset($Cache[$i]) && !isset($New[$i]))
                $PrintArray[] = array_merge($Cache[$i],array("type" => $this->aMessages["deleted"]));
 
              if(!isset($Cache[$i]) && isset($New[$i]))
                $PrintArray[] = array_merge($New[$i],array("type" => $this->aMessages["new"]));
 
              if(isset($Cache[$i]) && isset($New[$i])){
                if($Cache[$i] != $New[$i]){
                  $PrintArray[] = array_merge($Cache[$i],array("type" => $this->aMessages["old"]));
                  $PrintArray[] = array_merge($New[$i],array("type" => $this->aMessages["changed"]));
                }else
                  $PrintArray[] = array_merge($New[$i],array("type" => $this->aMessages["same"]));
 
              }                
 
            }
 
            return array($this->_print($PrintArray),$this->_message($this->aString["difference"]));
 
    }
 
    function connectTo($mode) {
        $this->Lexer->addSpecialPattern('\[\[mysql\:.*?\]\]', $mode, 'plugin_sqlcomp');
        $this->Lexer->addSpecialPattern('\[\[mssql\:.*?\]\]', $mode, 'plugin_sqlcomp');
        $this->Lexer->addSpecialPattern('\[\[oracle\:.*?\]\]', $mode, 'plugin_sqlcomp');
        $this->Lexer->addSpecialPattern('\[\[sqlite\:.*?\]\]', $mode, 'plugin_sqlcomp');
        $this->Lexer->addSpecialPattern('\[\[sqlaccess\:.*?\]\]', $mode, 'plugin_sqlcomp');
        $this->Lexer->addSpecialPattern('\[\[postgresql\:.*?\]\]', $mode, 'plugin_sqlcomp');
        $this->Lexer->addSpecialPattern('\[\[sqlcsv\:.*?\]\]', $mode, 'plugin_sqlcomp');
 
        if(!file_exists($this->sConfig))
          $this->_createConfig();  
 
        include($this->sConfig);
 
        foreach($sqlcomp as $key => $value)
          #$this->Lexer->addSpecialPattern('\[\['.$key.'.*?\]\]', $mode, 'plugin_sqlcomp');
					#KB IMPORTANT CHANGE TO DISTINGUISH BETWEEN LINKS AND CONFIGS
          $this->Lexer->addSpecialPattern('\[\['.$key.'\|.*?\]\]', $mode, 'plugin_sqlcomp');
 
 
    }
    function _createConfig(){  
 
        $sContent = "";
        $sContent .= "<?php\n";
        $sContent .= "//Sample Configfile\n";
        $sContent .= "//Add as many servers as you want here...\n";
        $sContent .= '$sqlcomp["localhost"] = "mysql:localhost:root::information_schema";';
        $sContent .= '$sqlcomp["sampleconnection"] = "sqltype:servername:username:password:database";';
        $sContent .= "\n?>\n";
 
        $handle = fopen($this->sConfig,"w");
        fwrite($handle,$sContent);
        fclose($handle);
 
    }
 
    function getType() { return 'substition'; }
 
    function getSort() { return 267; }
 
    function handle($match, $state, $pos, &$handler) {
 
        $temp = $match;
        $match = substr($match,2,-2); # remove braces [[, ]]
 
        $match = explode("|",$match); # split into DBCON, QUERY, CACHE, EXTRA

        # handle DBCON	
        if(file_exists($this->sConfig)){
          include($this->sConfig);
	  foreach($sqlcomp as $key => $value)
	    if($key == $match[0])
	      $match[0] = $value;
	}
       // Array ( [pdb] => mysql:kbwm-prod.kreisbote.de:pdb_user:use4db:pdb [jps] => mysql:kbwm-prod.kreisbote.de:jps:sq88ll:journal ) 
        $MyData =  explode(":",$match[0]);  # adds 5 fields: type:host:user:pass:db
	# replace spaces with ':'
        for($i=0;$i < 5; $i++)
          $MyData[$i] = str_replace(" ", ":",$MyData[$i]);

	# handle QUERY
        $MyData[] = $match[1];

        # handle CACHE
        if(isset($match[2]))
          $MyData[] = $match[2];    
        else
          $MyData[] = $this->defaultRefresh;  

	# KREISBOTE: handle EXTRA
	if(isset($match[3]))
	  $MyData[] = explode(',',$match[3]);
	else
	  $MyData[] = array();

        return $MyData;
 
    }

    /**
     * Send HTML data to Dokuwiki-renderer
     */
    function render($mode, &$renderer, $data)
    {
      if($mode == 'xhtml'){
	$renderer->doc .= $this->_query($data);
	return true;
      }
      return false;
    }
}

